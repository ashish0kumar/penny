import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { createFileRoute, useNavigate } from '@tanstack/react-router'
import { useForm } from '@tanstack/react-form'
import { api } from '@/lib/api'

export const Route = createFileRoute('/_authenticated/create-expense')({
    component: CreateExpense,
})

function CreateExpense() {
    const navigate = useNavigate()

    const form = useForm({
        defaultValues: {
            title: '',
            amount: 0,
        },
        onSubmit: async ({ value }) => {
            await new Promise((resolve) => setTimeout(resolve, 2000))

            const res = await api.expenses.$post({ json: value })
            if (!res.ok) {
                throw new Error('server error')
            }
            navigate({ to: '/expenses' })
        },
    })

    return (
        <div className='p-2'>
            <h1 className='text-center my-4 text-xl'>Create Expense</h1>
            <form
                onSubmit={(e) => {
                    e.preventDefault()
                    e.stopPropagation()
                    form.handleSubmit()
                }}
                className='max-w-xl m-auto'
            >
                <form.Field
                    name='title'
                    children={(field) => (
                        <>
                            <Input
                                id={field.name}
                                name={field.name}
                                value={field.state.value}
                                onBlur={field.handleBlur}
                                onChange={(e) => field.handleChange(e.target.value)}
                                placeholder='Title'
                                className='my-3'
                            />
                            {field.state.meta.isTouched && !field.state.meta.isValid ? (
                                <em>{field.state.meta.errors.join(', ')}</em>
                            ) : null}
                        </>
                    )}
                />

                <form.Field
                    name='amount'
                    children={(field) => (
                        <>
                            <Input
                                type='number'
                                id={field.name}
                                name={field.name}
                                value={field.state.value}
                                onBlur={field.handleBlur}
                                onChange={(e) => field.handleChange(Number(e.target.value))}
                                placeholder='Title'
                                className='my-3'
                            />
                            {field.state.meta.isTouched && !field.state.meta.isValid ? (
                                <em>{field.state.meta.errors.join(', ')}</em>
                            ) : null}
                        </>
                    )}
                />

                <form.Subscribe
                    selector={(state) => [state.canSubmit, state.isSubmitting]}
                    children={([canSubmit, isSubmitting]) => (
                        <Button className='mt-2' type='submit' disabled={!canSubmit}>
                            {isSubmitting ? '...' : 'Create Expense'}
                        </Button>
                    )}
                />
            </form>
        </div>
    )
}